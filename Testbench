`timescale 1ns / 1ps

module pipeline_processor_tb;
    reg clk, rst;
    reg [7:0] instruction;
    wire [7:0] result;

    pipeline_processor uut (
        .clk(clk),
        .rst(rst),
        .instruction(instruction),
        .result(result)
    );
	  // Clock generation
    always #5 clk = ~clk;

    initial begin
        // Initialize signals
        clk = 0; rst = 1; instruction = 0;
        #10 rst = 0;

        // Test ADD (Opcode: 00, Operands: 5 and 3)
        #10 instruction = 8'b00000101;  // 5 + 3

        // Test SUB (Opcode: 01, Operands: 9 and 2)
        #10 instruction = 8'b01001001;  // 9 - 2
		    #10 instruction = 8'b10000010;  // Load 2

        #20 $stop; // End simulation
    end
endmodule
